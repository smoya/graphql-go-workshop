// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package workshop

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type EventStatus string

const (
	EventStatusCancelled EventStatus = "cancelled"
	EventStatusDraft     EventStatus = "draft"
	EventStatusPast      EventStatus = "past"
	EventStatusProposed  EventStatus = "proposed"
	EventStatusSuggested EventStatus = "suggested"
	EventStatusUpcoming  EventStatus = "upcoming"
)

func (e EventStatus) IsValid() bool {
	switch e {
	case EventStatusCancelled, EventStatusDraft, EventStatusPast, EventStatusProposed, EventStatusSuggested, EventStatusUpcoming:
		return true
	}
	return false
}

func (e EventStatus) String() string {
	return string(e)
}

func (e *EventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventStatus", str)
	}
	return nil
}

func (e EventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RsvpResponse string

const (
	RsvpResponseYes RsvpResponse = "yes"
	RsvpResponseNo  RsvpResponse = "no"
)

func (e RsvpResponse) IsValid() bool {
	switch e {
	case RsvpResponseYes, RsvpResponseNo:
		return true
	}
	return false
}

func (e RsvpResponse) String() string {
	return string(e)
}

func (e *RsvpResponse) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RsvpResponse(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RsvpResponse", str)
	}
	return nil
}

func (e RsvpResponse) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
